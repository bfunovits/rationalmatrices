// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rationalmatrices.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lyapunov_cpp
bool lyapunov_cpp(const arma::mat& A, const arma::mat& Q, arma::mat& P, arma::vec& lambda_r, arma::vec& lambda_i, bool stop_if_non_stable);
static SEXP _rationalmatrices_lyapunov_cpp_try(SEXP ASEXP, SEXP QSEXP, SEXP PSEXP, SEXP lambda_rSEXP, SEXP lambda_iSEXP, SEXP stop_if_non_stableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambda_r(lambda_rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambda_i(lambda_iSEXP);
    Rcpp::traits::input_parameter< bool >::type stop_if_non_stable(stop_if_non_stableSEXP);
    rcpp_result_gen = Rcpp::wrap(lyapunov_cpp(A, Q, P, lambda_r, lambda_i, stop_if_non_stable));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rationalmatrices_lyapunov_cpp(SEXP ASEXP, SEXP QSEXP, SEXP PSEXP, SEXP lambda_rSEXP, SEXP lambda_iSEXP, SEXP stop_if_non_stableSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rationalmatrices_lyapunov_cpp_try(ASEXP, QSEXP, PSEXP, lambda_rSEXP, lambda_iSEXP, stop_if_non_stableSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lyapunov_Jacobian_cpp
bool lyapunov_Jacobian_cpp(const arma::mat& A, const arma::mat& Q, arma::mat& P, const arma::mat& dA, const arma::mat& dQ, arma::mat& J, arma::vec& lambda_r, arma::vec& lambda_i, bool stop_if_non_stable);
static SEXP _rationalmatrices_lyapunov_Jacobian_cpp_try(SEXP ASEXP, SEXP QSEXP, SEXP PSEXP, SEXP dASEXP, SEXP dQSEXP, SEXP JSEXP, SEXP lambda_rSEXP, SEXP lambda_iSEXP, SEXP stop_if_non_stableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dA(dASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dQ(dQSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambda_r(lambda_rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambda_i(lambda_iSEXP);
    Rcpp::traits::input_parameter< bool >::type stop_if_non_stable(stop_if_non_stableSEXP);
    rcpp_result_gen = Rcpp::wrap(lyapunov_Jacobian_cpp(A, Q, P, dA, dQ, J, lambda_r, lambda_i, stop_if_non_stable));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rationalmatrices_lyapunov_Jacobian_cpp(SEXP ASEXP, SEXP QSEXP, SEXP PSEXP, SEXP dASEXP, SEXP dQSEXP, SEXP JSEXP, SEXP lambda_rSEXP, SEXP lambda_iSEXP, SEXP stop_if_non_stableSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rationalmatrices_lyapunov_Jacobian_cpp_try(ASEXP, QSEXP, PSEXP, dASEXP, dQSEXP, JSEXP, lambda_rSEXP, lambda_iSEXP, stop_if_non_stableSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _rationalmatrices_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("bool(*lyapunov_cpp)(const arma::mat&,const arma::mat&,arma::mat&,arma::vec&,arma::vec&,bool)");
        signatures.insert("bool(*lyapunov_Jacobian_cpp)(const arma::mat&,const arma::mat&,arma::mat&,const arma::mat&,const arma::mat&,arma::mat&,arma::vec&,arma::vec&,bool)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _rationalmatrices_RcppExport_registerCCallable() { 
    R_RegisterCCallable("rationalmatrices", "_rationalmatrices_lyapunov_cpp", (DL_FUNC)_rationalmatrices_lyapunov_cpp_try);
    R_RegisterCCallable("rationalmatrices", "_rationalmatrices_lyapunov_Jacobian_cpp", (DL_FUNC)_rationalmatrices_lyapunov_Jacobian_cpp_try);
    R_RegisterCCallable("rationalmatrices", "_rationalmatrices_RcppExport_validate", (DL_FUNC)_rationalmatrices_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_rationalmatrices_lyapunov_cpp", (DL_FUNC) &_rationalmatrices_lyapunov_cpp, 6},
    {"_rationalmatrices_lyapunov_Jacobian_cpp", (DL_FUNC) &_rationalmatrices_lyapunov_Jacobian_cpp, 9},
    {"_rationalmatrices_RcppExport_registerCCallable", (DL_FUNC) &_rationalmatrices_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_rationalmatrices(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
