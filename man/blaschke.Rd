% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reflect_poles_zeroes.R
\name{blaschke}
\alias{blaschke}
\alias{blaschke2}
\title{Blaschke Factors}
\usage{
blaschke(alpha)

blaschke2(alpha, w = NULL, tol = 100 * .Machine$double.eps)
}
\arguments{
\item{alpha}{complex or real scalar, represents \eqn{\alpha}.}

\item{w}{\code{NULL} or a (complex) vector of length 2.}

\item{tol}{Tolerance (used to decide whether \code{alpha} 
has modulus equal to one).}
}
\value{
\code{\link{lmfd}} object, which represents the constructed 
        "Blaschke factors" 
        \eqn{B(z)}, \eqn{B_s(z)}{Bs(z)} or \eqn{B_2(z)}{B2(z)}.
}
\description{
The Blaschke factor at \eqn{\alpha}{\alpha} is the rational function
\deqn{B(z) := \frac{1-\bar{\alpha}z}{-\alpha + z}}{
      B(z) := (1-Conj(\alpha)z) / (-\alpha+z)}
This is an all-pass function with a pole at \eqn{z=\alpha} and a zero at
\eqn{z=1/\bar{\alpha}}{z=1/Conj(\alpha)}. The function \code{blaschke(alpha)}
returns this rational \eqn{(1 \times 1)}{(1 x 1)} matrix in
\code{\link{lmfd}} form. Clearly \eqn{B(z)} has complex coefficients, if
\eqn{\alpha} is complex.
\cr
The call \code{blaschke2(alpha, row=NULL)} computes the product of the
Blaschke factors at \eqn{\alpha} and at \eqn{\bar{\alpha}}{Conj(\alpha)},
i.e. the rational function
\deqn{B_{s}(z) := 
\frac{1-2\Re(\alpha)z + |\alpha|^2 z^2}{|\alpha|^2 -2\Re(\alpha) z + z^2}}{
      Bs(z) := 
(1-2Re(\alpha)z + Mod(\alpha)^2 z^2) / (Mod(\alpha)^2 -2Re(\alpha) z + z^2)}
\cr
If \code{blaschke2} is called with an optional argument \code{w} 
(a non zero complex vector of length 2) then 
\code{blaschke2} constructs a \eqn{(2 \times 2)}{(2 x 2)} rational, 
all-pass matrix of the form 
\deqn{B_{2}(z) := a^{-1}(z) b(z)}{B2(z) := a^{-1}(z) b(z)} where 
\eqn{a(z), b(z)} are  two \eqn{(2 \times 2)}{(2 x 2)} polynomial 
matrices (with real coefficients) of degree one. 
This matrix is constructed such that the column space of 
\eqn{a(\alpha)} is spanned by  \eqn{\bar{w}}{Conj(w)} and 
the column space of 
\eqn{a(\bar{\alpha})}{a(Conj(\alpha))} is spanned by the vector \eqn{w}.
}
\note{
The routine \code{blaschke2} throws an error if \eqn{\alpha} is not
  complex (i.e. the imaginary part is zero). If \eqn{\alpha} is close to the
  unit circle then \code{blaschke2(alpha, w)} simply returns an
  \code{\link{lmfd}} representation of the bivariate identity matrix. If
  \eqn{w} and \eqn{\bar{w}}{Conj(w)} are almost linearly dependent, then an
  error is thrown.
}
\examples{
# Blaschke factor with a real alpha
(B = blaschke(1.5))
zvalues(B) \%>\% abs()

# Blaschke factor with a complex alpha
(B = blaschke(complex(real = 1.5, imaginary = 0.5)))
zvalues(B) \%>\% abs()

# product of the Blaschke factors at alpha and Conj(alpha) 
# this gives a scalar, rational, all-pass matrix with real coefficients
(B = blaschke2(complex(real = 1.5, imaginary = 0.5)))
zvalues(B) \%>\% abs()

#############################################################
# a "bivariate" Blaschke factor 

# case 1: alpha is "outside the unit circle" ################
(alpha = complex(real = 1.5, imaginary = 0.5))
(w = complex(real = c(0.1,0.9), imaginary = c(0.75,-0.5)))

(B = blaschke2(alpha, w = w))
# B(z) is all-pass 
print(zvalues(B) \%r\% Ht(zvalues(B)), digits = 3)

# B(z) has poles at z=alpha, z=Conj(alpha) and 
# zeroes at z=1/alpha and z=1/Conj(alpha)
poles(B)
zeroes(B)

# The column space of a(alpha) is spanned by the vector Conj(w).
max(abs( Conj(c(-w[2], w[1])) \%*\% zvalue(B$a, alpha) ))

# case 2: alpha is "inside the unit circle" #################
(alpha = 1 / complex(real = 1.5, imaginary = 0.5))
(w = complex(real = c(0.1,0.9), imaginary = c(0.75,-0.5)))

(B = blaschke2(alpha, w = w))
# B(z) is all-pass 
print(zvalues(B) \%r\% Ht(zvalues(B)), digits = 3)

# B(z) has poles at z=alpha, z=Conj(alpha) and 
# zeroes at z=1/alpha and z=1/Conj(alpha)
poles(B)
zeroes(B)

# The column space of a(alpha) is spanned by the vector Conj(w).
max(abs( Conj(c(-w[2], w[1])) \%*\% zvalue(B$a, alpha) ))

# case 3: alpha is "on the unit circle" #####################
alpha = alpha / Mod(alpha)
blaschke2(alpha) \%>\% print(digits = 2)
blaschke2(alpha, w = w) \%>\% print(digits = 2)
}
