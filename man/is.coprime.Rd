% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/polm_methods.R
\name{is.coprime}
\alias{is.coprime}
\title{Left Prime and Left Coprime Polynomials}
\usage{
is.coprime(
  a,
  b = NULL,
  tol = sqrt(.Machine$double.eps),
  only.answer = TRUE,
  debug = FALSE
)
}
\arguments{
\item{a, b}{If \code{a} is an \code{\link{lmfd}} or an \code{\link{rmfd}} object, 
which represents a left matrix fraction description, say \eqn{p^{-1}(z) q(z)}, 
or a right MFD, say \eqn{r(z) s^{-1}(z)}, 
then the procedure tests whether the pair \eqn{(p(z),q(z))} or \eqn{(t(r(z)),t(q(z)))}is left coprime. 
       
Otherwise the arguments \code{a} and \code{b} (if \code{b} is not NULL) must represent two compatible polynomial matrices, 
i.e. \code{a}, \code{b} must be \code{\link{polm}} objects (or objects which may be coerced to \code{polm} objects). 
If \code{b} is NULL, the procedures checks whether \eqn{a(z)} is left prime,
otherwise the pair \eqn{(a(z),b(z))} is checked for left coprimeness.}

\item{tol}{a tolerance parameter, which is used to decide the rank of certain matrices.}

\item{only.answer}{if TRUE, just return a logical (\code{TRUE} or \code{FALSE}). 
Otherwise a list with additional information is returned.}

\item{debug}{if TRUE, print some diagnostic information.}
}
\value{
If \code{only.answer} is true then a logical (\code{TRUE} or \code{FALSE}) is returned.
  Otherwise, a list with the following slots is returned. A more detailed description 
  of these items is given in the vignette \href{../doc/technical_details.html}{Technical Details}.
  \item{answer}{A boolean as above}
  \item{A,B}{These matrices represent the pencil \eqn{(A-Bz)} (in staircase form) which is used 
             to check the left (co-)prime condition.}
  \item{m,n}{Two integer vectors which code the structure of the staircase form.}
  \item{zeroes}{If available, a vector of zeroes of the matrix \eqn{(a(z),b(z))}. If 
                \eqn{(a,b)} have no common zeroes (the left coprime case) then 
                \code{zeroes} is an empty numeric vector. The case that 
                \eqn{(a(z),b(z))} is rank deficient for \emph{all} \eqn{z \in C}{z in C} 
                is coded with \code{z=NA}.}
}
\description{
Check whether a polynomial is \emph{left prime} or a pair of two polynomials is \emph{left coprime}.
This check uses a (singular) pencil associated with the polynomial(s). For more details 
see the vignette \href{../doc/technical_details.html}{Technical Details}.
}
\note{
This procedure returns different objects, depending on the parameter \code{only.answer}.
}
\examples{
# Ex 1: Two coprime polynomials ##################################################

# Generate two random (2 x 2) polynomial matrices with degree 2
set.seed(1803)
a = test_polm(dim = c(2,2), degree = 2, random = TRUE, digits = 1)
b = test_polm(dim = c(2,2), degree = 2, random = TRUE, digits = 1)

# Output: "only.answer = TRUE"
is.coprime(a, b, debug = FALSE, only.answer = TRUE)

# Output: "only.answer = FALSE"
out = is.coprime(a, b, debug = FALSE, only.answer = FALSE)
str(out)
out$answer
out$zeroes

# we could equivalently use the syntax: 
is.coprime(cbind(a,b))
is.coprime(lmfd(a,b))

# Ex 2: Two non-coprime polynomials with a finite number of common zeros #############
# Dimensions of a, b, and the common factor r
dim = 3
deg_aa = 1
deg_bb = 1
deg_r = 1

# Generate random polynomial matrices
a0 = a
b0 = b
# generate common factor 
r = test_polm(dim = c(2,2), degree = 1, random = TRUE, digits = 1)

# Generate polynomials with a common factor
a = r \%r\% a0
b = r \%r\% b0

out = is.coprime(a, b, debug = FALSE, only.answer = FALSE)
out$answer
out$zeroes


# Ex 3: Two non-coprime polynomials: Everywhere rank deficient ###################

# generate a common factor of rank 1 
r = test_polm(dim = c(2,1), degree = 1, random = TRUE, digits = 1) \%r\% 
    test_polm(dim = c(1,2), degree = 1, random = TRUE, digits = 1)

# Rank deficient matrices with common factor
a = r \%r\% a0
b = r \%r\% b0

out = is.coprime(a,b, only.answer = FALSE)
out$answer
out$zeroes


# Ex 4: Right-MFD ####

c = test_polm(dim = c(2,2), degree = 2, random = TRUE, digits = 1)
d = test_polm(dim = c(2,2), degree = 2, random = TRUE, digits = 1)

# Output: "only.answer = TRUE"
is.coprime(t(c), t(d), debug = FALSE, only.answer = TRUE)

# Output: "only.answer = FALSE"
out = is.coprime(t(c), t(d), debug = FALSE, only.answer = FALSE)
str(out)
out$answer
out$zeroes

# we could equivalently use the syntax: 
is.coprime(rbind(c,d))
is.coprime(rmfd(c,d))

# reset seed
set.seed(NULL)
}
