% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lyapunov.R
\name{lyapunov_Jacobian}
\alias{lyapunov_Jacobian}
\title{Jacobian of the Solution of the Lyapunov Equation}
\usage{
lyapunov_Jacobian(A, Q, dA, dQ, non_stable = c("ignore", "warn", "stop"))
}
\arguments{
\item{A, Q}{\eqn{(m,m)} matrices. Note that the routine silently assumes that
\eqn{Q} is symmetric (and hence the solution \eqn{P} is also symmetric).}

\item{dA, dQ}{\eqn{(m^2,n)} matrices. Each column of \eqn{dA}, \eqn{dQ} determines a 
direction along which the derivative is computed. Note that the routine 
silently assumes that each column of \eqn{dQ} represents a symmetric matrix
(and hence \eqn{dP} is also symmetric).}

\item{non_stable}{(character string) indicates what to do, when \eqn{A} is not stable.}
}
\value{
List with the slots
\item{P}{(\eqn{(m^2,n)}-dimensional matrix) Solution of the lyapunov equation}
\item{J}{(\eqn{(m^2,n)}-dimensional matrix) Jacobian of the vectorised solution
         of the Lyapunov equation. Each column of \eqn{J} is the 
         directional derivative of \eqn{vec(P)} along the respective columns 
         of \eqn{dA} and \eqn{dQ}.} 
\item{lambda}{Eigenvalues of \eqn{A}.}
\item{is_stable}{(boolean) Is \eqn{A} stable or not?}
}
\description{
This (internal helper) function considers the solution of a Lyapunov equation
\deqn{P = A P A' + Q}
where \eqn{A,Q} are real valued, square matrices and \eqn{Q} is symmetric. 
The \emph{directional derivative} of \eqn{P} along (the matrices) \eqn{dA}, \eqn{dQ} 
is given by the solution of the Lyapunov Equation: 
\deqn{dP = A dP A' + dA P A' + A P dA' + dQ}
}
\examples{
m = 5

A = matrix(rnorm(m^2), nrow = m, ncol = m)
Q = crossprod(matrix(rnorm(m^2), nrow = m, ncol = m))
P = lyapunov(A, Q)
all.equal(Q, P - A \%*\% P \%*\% t(A))

n = 6
dA = matrix(rnorm((m^2)*n), nrow = m^2, ncol = n)
dQ = matrix(rnorm((m^2)*n), nrow = m^2, ncol = n)
for (i in (1:n)) {
  # make sure that each column of dQ corresponds to a symmetric matrix!
  junk = matrix(dQ[,i], nrow = m, ncol = m)
  junk = junk + t(junk)
  dQ[,i] = junk
}
out = lyapunov_Jacobian(A, Q, dA, dQ)
all.equal(out$P, P)
 
eps = 1e-8
theta = rnorm(n)
matrix(out$J \%*\% theta, nrow = m, ncol = m)

# compute the derivative via "finite differences"
dP = lyapunov(A + matrix(dA \%*\% theta, nrow = m, ncol = m)*eps, 
              Q + matrix(dQ \%*\% theta, nrow = m, ncol = m)*eps)
all.equal(matrix(out$J \%*\% theta, nrow = m, ncol = m), 
          (dP - P)/eps, scale = mean(abs(out$J)), tol = 1e-6)
}
\seealso{
\code{\link{lyapunov}}.
}
\keyword{internal}
