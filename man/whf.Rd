% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/polm_methods.R
\name{whf}
\alias{whf}
\title{Wiener-Hopf Factorization}
\usage{
whf(a, right_whf = TRUE, tol = sqrt(.Machine$double.eps), debug = FALSE)
}
\arguments{
\item{a}{\code{\link{polm}} object, which represents the polynomial matrix \eqn{A(z)}.}

\item{right_whf}{Boolean. Default set to TRUE. 
If FALSE, then the left WHF \deqn{A(z) = A_b(z) A_0(z) A_f(z) = A_b(z) A_r(z),}{A(z) = Ab(z) A0(z) Af(z) = Ab(z) Ar(z),}
where the matrix \eqn{A_r(z)}{Ar(z)} is row-reduced.}

\item{tol}{Tolerance parameter, used for "pruning" the polynomial matrix (after each step). 
See \code{\link{prune}}.}

\item{debug}{Logical, default set to FALSE. 
If TRUE, then some diagnostic messages are printed.}
}
\value{
List with components 
        \itemize{
           \item{af: }{A \code{\link{lpolm}} object. Forward component \eqn{A_f}{Af}, a Laurent polynomial whose coefficients pertaining to positive powers are zero.} 
           \item{ab: }{A \code{\link{polm}} object. Backward component \eqn{A_b}{Ab}}
           \item{a0: }{A \code{\link{polm}} object. Diagonal matrix with monomials of degrees equal to the partial indices \eqn{A_0}{A0}}
           \item{ar: }{A \code{\link{polm}} object) the column reduced polynomial \eqn{A_r}{Ar}}
           \item{idx: }{ A vector of integers. partial indices \eqn{(\kappa_1,\ldots,\kappa_n)}{(\kappa[1],\dots,\kappa[n])}}
         }
}
\description{
A (Right-) Wiener-Hopf factorization (R-WHF) of a (square \eqn{(m,m)}-dimensional, non singular) polynomial matrix \eqn{A(z)} is a factorization of the form 
\deqn{A(z) = A_f(z) A_0(z) A_b(z) = A_r(z) A_b(z),}{A(z) = Af(z) A0(z) Ab(z) = Ar(z) Ab(z),}
where 
\describe{
\item{\eqn{A_b(z)}{Ab(z)}}{is a polynomial matrix which has only zeros outside the unit circle.}
\item{\eqn{A_r(z)}{Ar(z)}}{is a column reduced polynomial matrix with column degrees 
                           \eqn{\kappa_i}{\kappa[i]} and all zeroes inside the unit circle.}
\item{\eqn{A_0(z)}{A0(z)}}{is a diagonal matrix with diagonal entries 
                   \eqn{z^{\kappa_i}}{z^{\kappa[i]}} where \eqn{\kappa_i \geq \kappa_{i+1}}{\kappa[i] \ge \kappa[i+1]}}
\item{\eqn{A_f(z)}{Af(z)}}{is a polynomial in \eqn{z^{-1}}. 
                   Note that \eqn{A_f(z) = Ar(z) A_0^{-1}(z)}{Af(z) = Ar(z) A0^{-1}(z)}.}
}                                            
The factors \eqn{A_f(z), A_0(z), A_b(z)}{Af(z), A0(z), Ab(z)} are called 
\emph{forward}, \emph{null} and \emph{backward} components of \eqn{A(z)} and the integers 
\eqn{(\kappa_1,\ldots,\kappa_n)}{(\kappa[1],\dots,\kappa[n])} are the 
\emph{partial indices} of \eqn{A(z)}.
\cr
Similarly, the Left-WHF is defined as
\deqn{A(z) = A_b(z) A_0(z) A_g(z) = A_b(z) A_r(z),}{A(z) = Ab(z) A0(z) Af(z) = Ab(z) Ar(z),}
where \eqn{A_r(z)}{Ar(z)} is now row-reduced.
\cr
Note that zeroes on the unit circle are not allowed. 
In this case the procedure \code{whf()} throws an error.
\cr
The Wiener-Hopf factorization plays an important role for the analysis of linear, 
rational expectation models. See e.g. \insertCite{Al-Sadoon2017}{rationalmatrices}.
}
\details{
The algorithm is based on the Smith normal form (SNF), \link{snf}, and a column reduction step, see \link{col_reduce}.
An alternative is described in \insertCite{gohkaaspit03_summerschool}{rationalmatrices} pages 7ff.
}
\examples{
set.seed(1234) 

# create test polynomial
a = test_polm(dim = c(3,3), deg = 2, digits = 2, random = TRUE)

# compute WHF and print the result
out = whf(a)
print(out$af, digits = 2, format = 'c')
print(out$a0, digits = 2, format = 'c')
print(out$ab, digits = 2, format = 'c')

# check the result
all.equal(a, prune(out$ar \%r\% out$ab))           # A = Ar * Ab

# check A(z) = Ab(z^{-1}) A0(z) Ab(z)
# generate random complex z's
z = complex(real = rnorm(10), imaginary = rnorm(10))
a_z  = zvalues(a, z)         # A(z)
ab_z = zvalues(out$ab, z)    # Ab(z)
a0_z = zvalues(out$a0, z)    # A0(z)
af_z = zvalues(out$af, 1/z)  # Af(z^{-1})  
attr(af_z, 'z') = z           # in order to combine the 'zvalues' objects, 
                              # the attribute 'z' must be identical
all.equal(a_z, af_z \%r\% a0_z \%r\% ab_z)

all.equal(out$idx, degree(out$ar, 'columns'))    # idx = column degrees of Ar
all(svd(col_end_matrix(out$ar))$d > 1e-7)     # Ar is column reduced
abs(zeroes(out$ar, print_message = FALSE))       # Ar has zeroes inside the unit circle
abs(zeroes(out$ab, print_message = FALSE))       # Ab zeroes outside the unit circle

set.seed(NULL)
}
\references{
\insertRef{Al-Sadoon2017}{rationalmatrices}
\insertCite{gohkaaspit03_summerschool}{rationalmatrices}
}
