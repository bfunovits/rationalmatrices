// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_rationalmatrices_RCPPEXPORTS_H_GEN_
#define RCPP_rationalmatrices_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace rationalmatrices {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("rationalmatrices", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("rationalmatrices", "_rationalmatrices_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in rationalmatrices");
            }
        }
    }

    inline bool lyapunov_cpp(const arma::mat& A, const arma::mat& Q, arma::mat& P, arma::vec& lambda_r, arma::vec& lambda_i, bool stop_if_non_stable) {
        typedef SEXP(*Ptr_lyapunov_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_lyapunov_cpp p_lyapunov_cpp = NULL;
        if (p_lyapunov_cpp == NULL) {
            validateSignature("bool(*lyapunov_cpp)(const arma::mat&,const arma::mat&,arma::mat&,arma::vec&,arma::vec&,bool)");
            p_lyapunov_cpp = (Ptr_lyapunov_cpp)R_GetCCallable("rationalmatrices", "_rationalmatrices_lyapunov_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_lyapunov_cpp(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(Q)), Shield<SEXP>(Rcpp::wrap(P)), Shield<SEXP>(Rcpp::wrap(lambda_r)), Shield<SEXP>(Rcpp::wrap(lambda_i)), Shield<SEXP>(Rcpp::wrap(stop_if_non_stable)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<bool >(rcpp_result_gen);
    }

    inline bool lyapunov_Jacobian_cpp(const arma::mat& A, const arma::mat& Q, arma::mat& P, const arma::mat& dA, const arma::mat& dQ, arma::mat& J, arma::vec& lambda_r, arma::vec& lambda_i, bool stop_if_non_stable) {
        typedef SEXP(*Ptr_lyapunov_Jacobian_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_lyapunov_Jacobian_cpp p_lyapunov_Jacobian_cpp = NULL;
        if (p_lyapunov_Jacobian_cpp == NULL) {
            validateSignature("bool(*lyapunov_Jacobian_cpp)(const arma::mat&,const arma::mat&,arma::mat&,const arma::mat&,const arma::mat&,arma::mat&,arma::vec&,arma::vec&,bool)");
            p_lyapunov_Jacobian_cpp = (Ptr_lyapunov_Jacobian_cpp)R_GetCCallable("rationalmatrices", "_rationalmatrices_lyapunov_Jacobian_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_lyapunov_Jacobian_cpp(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(Q)), Shield<SEXP>(Rcpp::wrap(P)), Shield<SEXP>(Rcpp::wrap(dA)), Shield<SEXP>(Rcpp::wrap(dQ)), Shield<SEXP>(Rcpp::wrap(J)), Shield<SEXP>(Rcpp::wrap(lambda_r)), Shield<SEXP>(Rcpp::wrap(lambda_i)), Shield<SEXP>(Rcpp::wrap(stop_if_non_stable)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<bool >(rcpp_result_gen);
    }

}

#endif // RCPP_rationalmatrices_RCPPEXPORTS_H_GEN_
